from typing import Any, Iterable, Iterator, Optional, Tuple, Union

class FileProxyMixin(object):

    newlines = ... # type: Union[str, Tuple[str, ...], None]
    softspace = ... # type: bool

    @property
    def encoding (self) -> str: ...

    def fileno(self) -> int: ...
    def flush(self) -> None: ...
    def isatty(self) -> bool: ...

    def read(self, size: int) -> bytes: ...
    def readinto(self, b: Any) -> Optional[int]: ...
    def readline(self, size: int=...) -> bytes: ...
    def readlines(self, hint: int=...) -> Iterator[bytes]: ...

    def seek(self, offset: int, whence: int=...) -> int: ...
    def tell(self) -> int: ...

    def truncate(self, size: int=None) -> int: ...
    def write(self, b: Any) -> int: ...
    def writelines(self, lines: Iterable[bytes]) -> None: ...
    def seekable(self) -> bool: ...

    def __iter__(self) -> Iterator[bytes]: ...
