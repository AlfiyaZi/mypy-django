# Stubs for django.utils.datastructures (Python 3.5)

from collections import OrderedDict

from typing import (Any, Callable, Dict, Generic, Hashable, Iterable, List, Mapping, MutableSet,
                    overload, Tuple, TypeVar)

KT = TypeVar('KT', bound=Hashable)
VT = TypeVar('VT')

class OrderedSet(MutableSet[KT], Generic[KT]):
    dict = OrderedDict[KT, None]
    def __init__(self, iterable: Iterable[KT]=None) -> None: ...
    def add(self, item: KT) -> None: ...
    def remove(self, item: KT) -> None: ...
    def discard(self, item: KT) -> None: ...

class MultiValueDictKeyError(KeyError): ...

class MultiValueDict(Dict[KT, VT], Generic[KT, VT]):
    def __init__(self, key_to_list_mapping: Iterable[Tuple[KT, List[VT]]]=...) -> None: ...
    def __copy__(self) -> 'MultiValueDict[KT, VT]': ...
    def __deepcopy__(self, memo: Dict[str, Any]=None) -> 'MultiValueDict[KT, VT]': ...
    def getlist(self, key: KT, default: List[VT]=None) -> List[VT]: ...
    def setlist(self, key: KT, list_: List[VT]) -> None: ...
    def setlistdefault(self, key: KT, default_list: List[VT]=None) -> List[VT]: ...
    def appendlist(self, key: KT, value: VT): ...
    def lists(self) -> Iterable[Tuple[KT, List[VT]]]: ...
    def dict(self) -> Dict[KT, VT]: ...

class ImmutableList(tuple, Generic[VT]):
    warning = ...  # type: str
    def complain(self, *wargs, **kwargs) -> None: ...

class DictWrapper(Dict[str, VT], Generic[VT]):
    func = ...  # type: Callable[[VT], VT]
    prefix = ...  # type: str
    @overload
    def __init__(self, data: Mapping[str, VT], func: Callable[[VT], VT], prefix: str) -> None: ...
    @overload
    def __init__(self, data: Iterable[Tuple[str, VT]], func: Callable[[VT], VT], prefix: str) -> None: ...
